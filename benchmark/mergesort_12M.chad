int merge(int[1] arr, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    int[1] L = new int[n1];
    int[1] R = new int[n2];

    int i = 0;
    while (i < n1) {
        L[i] = arr[l + i];
        i = i + 1;
    }

    int j = 0;
    while (j < n2) {
        R[j] = arr[m + 1 + j];
        j = j + 1;
    }

    i = 0;
    j = 0;
    int k = l;

    while (i < n1 & j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i = i + 1;
        } else {
            arr[k] = R[j];
            j = j + 1;
        }
        k = k + 1;
    }

    while (i < n1) {
        arr[k] = L[i];
        i = i + 1;
        k = k + 1;
    }

    while (j < n2) {
        arr[k] = R[j];
        j = j + 1;
        k = k + 1;
    }

    return 0;
}

int mergeSortHelper(int[1] arr, int l, int r) {
    while (l < r) {
        int m = l + (r - l) / 2;

        mergeSortHelper(arr, l, m);
        mergeSortHelper(arr, m + 1, r);

        merge(arr, l, m, r);
        
        return 0;
    }

    return 0;
}

int mergeSort(int[1] arr, int n) {
    return mergeSortHelper(arr, 0, n - 1);
}

int main() {
    int arr_size = 12000000;
    int[1] arr = new int[arr_size];

	int j = 0;
    while (j < arr_size) {
		arr[j] = arr_size - j;
        j = j + 1;
    }
    mergeSort(arr, arr_size);
    return 0;
}
